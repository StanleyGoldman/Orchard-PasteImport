using System;
using System.IO;
using System.Web.Mvc;
using Contrib.PasteImport.Services;
using Contrib.PasteImport.ViewModels;
using Orchard;
using Orchard.ImportExport;
using Orchard.ImportExport.Services;
using Orchard.Localization;
using Orchard.Recipes.Services;
using Orchard.UI.Notify;

namespace Contrib.PasteImport.Controllers
{
    public class AdminController : Controller
    {
        private readonly IRecipeParser _recipeParser;
        private readonly ICustomRecipeManager _customRecipeManager;
        private readonly IRecipeJournal _recipeJournal;

        public AdminController(IOrchardServices services, IRecipeParser recipeParser, ICustomRecipeManager customRecipeManager, IRecipeJournal recipeJournal)
        {
            _recipeParser = recipeParser;
            _customRecipeManager = customRecipeManager;
            _recipeJournal = recipeJournal;
            Services = services;
            T = NullLocalizer.Instance;
        }

        public IOrchardServices Services { get; private set; }
        public Localizer T { get; set; }

        public ActionResult Paste()
        {
            return View(new PasteImportViewModel());
        }

        [HttpPost, ActionName("Paste"), ValidateInput(false)]
        public ActionResult PastePOST(PasteImportViewModel pasteImportViewModel)
        {
            if (ModelState.IsValid)
            {
                if (!Services.Authorizer.Authorize(Permissions.Import, T("Not allowed to import.")))
                    return new HttpUnauthorizedResult();

                const string recipeOutline = "<Orchard><Recipe><Name>Generated by Contrib.PasteImport</Name><Author>{0}</Author></Recipe>{1}</Orchard>";
                var recipeString = string.Format(recipeOutline, Services.WorkContext.CurrentUser.UserName, pasteImportViewModel.RecipeSteps);
                var recipe = _recipeParser.ParseRecipe(recipeString);

                var executionId = _customRecipeManager.Execute(recipe);
                var recipeJournal = _recipeJournal.GetRecipeJournal(executionId);

                Services.Notifier.Information(T("Your recipe has been executed."));

                ModelState.Clear();

                return View(new PasteImportViewModel { RecipeJournal = recipeJournal});
            }

            return View(pasteImportViewModel);
        }
    }
}